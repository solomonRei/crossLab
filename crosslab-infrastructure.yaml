AWSTemplateFormatVersion: '2010-09-09'
Description: 'CrossLab Platform - Connected AWS Architecture for Visualization'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8

Resources:
  # ========== NETWORKING ==========
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24

  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # ========== SECURITY GROUPS ==========
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref DatabaseSecurityGroup

  # ========== FRONTEND ==========
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub 'crosslab-frontend-${Environment}'
      EnvironmentVariables:
        - Name: REACT_APP_API_URL
          Value: 'https://192.168.0.47:7001'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_WEBSOCKET_URL
          Value: !Sub 'wss://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'

  # ========== AUTHENTICATION ==========
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'crosslab-users-${Environment}'
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub 'crosslab_identity_${Environment}'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # ========== STORAGE ==========
  UserUploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'crosslab-uploads-${Environment}-${AWS::AccountId}'
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup

  ProjectAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'crosslab-assets-${Environment}-${AWS::AccountId}'

  # ========== DATABASES ==========
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for database
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'crosslab-db-${Environment}'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: crosslab_admin
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      VpcSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup

  ChatMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'crosslab-chat-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: chat_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: chat_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AIConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'crosslab-ai-conversations-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: conversation_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: conversation_id
          KeyType: RANGE

  # ========== BACKEND SERVICES ==========
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'crosslab-backend-${Environment}'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'crosslab-cluster-${Environment}'

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'crosslab-task-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: crosslab-api
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest'
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: DATABASE_URL
              Value: !Sub 'postgresql://crosslab_admin:${DatabasePassword}@${Database.Endpoint.Address}:5432/crosslab'
            - Name: DYNAMODB_CHAT_TABLE
              Value: !Ref ChatMessagesTable
            - Name: S3_UPLOADS_BUCKET
              Value: !Ref UserUploadsBucket

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet
      LoadBalancers:
        - ContainerName: crosslab-api
          ContainerPort: 8080
          TargetGroupArn: !Ref ALBTargetGroup

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'crosslab-alb-${Environment}'
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'crosslab-tg-${Environment}'
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # ========== REAL-TIME COMMUNICATION ==========
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'crosslab-websocket-${Environment}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn: 
      - WebSocketConnectRoute
    Properties:
      ApiId: !Ref WebSocketAPI

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketAPI
      DeploymentId: !Ref WebSocketDeployment
      StageName: !Ref Environment

  # ========== SERVERLESS FUNCTIONS ==========
  WebSocketConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'crosslab-websocket-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          CHAT_TABLE: !Ref ChatMessagesTable
          AI_TABLE: !Ref AIConversationsTable
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Code:
        ZipFile: |
          import json
          import boto3
          def handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              return {'statusCode': 200}

  AIProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'crosslab-ai-processing-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref UserUploadsBucket
          DATABASE_URL: !Sub 'postgresql://crosslab_admin:${DatabasePassword}@${Database.Endpoint.Address}:5432/crosslab'
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Code:
        ZipFile: |
          import json
          import boto3
          def handler(event, context):
              s3 = boto3.client('s3')
              return {'statusCode': 200, 'body': 'AI processing completed'}

  # ========== AI WORKFLOWS ==========
  AutoGradingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'crosslab-auto-grading-${Environment}'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Auto-grading workflow",
          "StartAt": "ValidateSubmission",
          "States": {
            "ValidateSubmission": {
              "Type": "Task",
              "Resource": "${AIProcessingFunction.Arn}",
              "Next": "SendNotification"
            },
            "SendNotification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${NotificationTopic}",
                "Message": "Grading completed"
              },
              "End": true
            }
          }
        }

  AICopilotStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'crosslab-ai-copilot-${Environment}'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "AI Copilot workflow",
          "StartAt": "ProcessRequest",
          "States": {
            "ProcessRequest": {
              "Type": "Task",
              "Resource": "${AIProcessingFunction.Arn}",
              "Next": "SendToQueue"
            },
            "SendToQueue": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sqs:sendMessage",
              "Parameters": {
                "QueueUrl": "${NotificationQueue}",
                "MessageBody": "AI response ready"
              },
              "End": true
            }
          }
        }

  # ========== MESSAGING ==========
  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'crosslab-notifications-${Environment}'
      VisibilityTimeoutSeconds: 300

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'crosslab-notifications-${Environment}'

  EventBridge:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub 'crosslab-events-${Environment}'

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBridge
      EventPattern:
        source: ['crosslab.platform']
        detail-type: ['Project Created', 'Team Formed']
      Targets:
        - Arn: !GetAtt NotificationTopic.TopicArn
          Id: 'NotificationTarget'

  # ========== LOGGING ==========
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/crosslab-${Environment}'

  # ========== IAM ROLES ==========
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CrossLabTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${UserUploadsBucket}/*'
                  - !Sub '${ProjectAssetsBucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt ChatMessagesTable.Arn
                  - !GetAtt AIConversationsTable.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CrossLabLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ChatMessagesTable.Arn
                  - !GetAtt AIConversationsTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${UserUploadsBucket}/*'
                  - !Sub '${ProjectAssetsBucket}/*'

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CrossLabStepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt AIProcessingFunction.Arn
                  - !GetAtt WebSocketConnectFunction.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt NotificationQueue.Arn

  # ========== LAMBDA PERMISSIONS ==========
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*'

Outputs:
  VPCId:
    Value: !Ref VPC
  DatabaseEndpoint:
    Value: !GetAtt Database.Endpoint.Address
  AmplifyAppId:
    Value: !GetAtt AmplifyApp.AppId
  WebSocketURL:
    Value: !Sub 'wss://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  LoadBalancerURL:
    Value: 'https://192.168.0.47:7001' 